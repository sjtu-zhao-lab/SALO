;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit PE : 
  module PE : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in_q : Fixed<9><<4>>, flip in_sum : Fixed<18><<8>>, flip in_sum_exp : SInt<5>, flip in_kv : Fixed<9><<4>>, flip in_inv_sum_exp : SInt<5>, flip in_inv_sum : Fixed<9><<7>>, flip in_stage : UInt<3>, out_q : Fixed<9><<4>>, out_sum : Fixed<18><<8>>, out_sum_exp : SInt<5>, out_kv : Fixed<9><<4>>, out_stage : UInt<3>, out_acc : Fixed<18><<8>>, out_prob : Fixed<9><<7>>}
    
    reg q : Fixed<9><<4>>, clock @[PE.scala 50:16]
    reg kv : Fixed<9><<4>>, clock @[PE.scala 51:17]
    reg sum : Fixed<18><<8>>, clock @[PE.scala 52:18]
    reg sum_exp : SInt<5>, clock @[PE.scala 53:22]
    reg stage : UInt<3>, clock @[PE.scala 54:20]
    q <= io.in_q @[PE.scala 56:7]
    kv <= io.in_kv @[PE.scala 57:8]
    stage <= io.in_stage @[PE.scala 58:11]
    io.out_q <= q @[PE.scala 60:14]
    io.out_kv <= kv @[PE.scala 61:15]
    io.out_sum <= sum @[PE.scala 62:16]
    io.out_sum_exp <= sum_exp @[PE.scala 63:20]
    io.out_stage <= stage @[PE.scala 64:18]
    reg reg_acc : Fixed<18><<8>>, clock @[PE.scala 66:22]
    reg reg_prob : Fixed<9><<4>>, clock @[PE.scala 67:23]
    io.out_acc <= reg_acc @[PE.scala 69:16]
    node _io_out_prob_T = asFixedPoint(reg_prob, 7) @[PE.scala 70:41]
    io.out_prob <= _io_out_prob_T @[PE.scala 70:17]
    wire fraction_bits : Fixed<9><<4>> @[PE.scala 72:29]
    wire integer_bits : SInt<5> @[PE.scala 73:28]
    reg reg_max_exp : SInt<5>, clock @[PE.scala 75:26]
    wire max_exp : SInt<5> @[PE.scala 76:23]
    wire shifted_acc : Fixed<18><<8>> @[PE.scala 77:27]
    wire shifted_sum : Fixed<18><<8>> @[PE.scala 78:27]
    wire _lut_k_WIRE : Fixed<9><<4>>[4] @[PE.scala 82:32]
    _lut_k_WIRE[0] <= asFixedPoint(UInt<9>("h0c"), 4) @[PE.scala 82:32]
    _lut_k_WIRE[1] <= asFixedPoint(UInt<9>("h0e"), 4) @[PE.scala 82:32]
    _lut_k_WIRE[2] <= asFixedPoint(UInt<9>("h011"), 4) @[PE.scala 82:32]
    _lut_k_WIRE[3] <= asFixedPoint(UInt<9>("h014"), 4) @[PE.scala 82:32]
    reg lut_k : Fixed<9><<4>>[4], clock with : (reset => (reset, _lut_k_WIRE)) @[PE.scala 82:24]
    wire _lut_b_WIRE : Fixed<18><<8>>[4] @[PE.scala 83:32]
    _lut_b_WIRE[0] <= asFixedPoint(UInt<18>("h0ff"), 8) @[PE.scala 83:32]
    _lut_b_WIRE[1] <= asFixedPoint(UInt<18>("h0f6"), 8) @[PE.scala 83:32]
    _lut_b_WIRE[2] <= asFixedPoint(UInt<18>("h0e1"), 8) @[PE.scala 83:32]
    _lut_b_WIRE[3] <= asFixedPoint(UInt<18>("h0b9"), 8) @[PE.scala 83:32]
    reg lut_b : Fixed<18><<8>>[4], clock with : (reset => (reset, _lut_b_WIRE)) @[PE.scala 83:24]
    wire k : Fixed<9><<4>> @[PE.scala 85:17]
    wire b : Fixed<18><<8>> @[PE.scala 86:17]
    node _integer_bits_T = bits(reg_acc, 15, 11) @[PE.scala 88:28]
    node _integer_bits_T_1 = asSInt(_integer_bits_T) @[PE.scala 88:43]
    integer_bits <= _integer_bits_T_1 @[PE.scala 88:18]
    node _fraction_bits_T = bits(reg_acc, 10, 3) @[PE.scala 89:29]
    node _fraction_bits_T_1 = cvt(_fraction_bits_T) @[PE.scala 89:41]
    node _fraction_bits_T_2 = asFixedPoint(_fraction_bits_T_1, 4) @[PE.scala 89:56]
    fraction_bits <= _fraction_bits_T_2 @[PE.scala 89:19]
    node _k_T = bits(fraction_bits, 7, 6) @[PE.scala 90:29]
    k <= lut_k[_k_T] @[PE.scala 90:7]
    node _b_T = bits(fraction_bits, 7, 6) @[PE.scala 91:29]
    b <= lut_b[_b_T] @[PE.scala 91:7]
    node _T = asUInt(reg_acc) @[PE.scala 92:47]
    node _T_1 = bits(reset, 0, 0) @[PE.scala 92:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[PE.scala 92:11]
    when _T_2 : @[PE.scala 92:11]
      printf(clock, UInt<1>(1), "reg_acc = %b\n", _T) @[PE.scala 92:11]
      skip @[PE.scala 92:11]
    wire oprand1 : Fixed<9><<4>> @[PE.scala 96:23]
    wire oprand2 : Fixed<9><<4>> @[PE.scala 97:23]
    wire oprand3 : Fixed<18><<8>> @[PE.scala 98:23]
    wire product : Fixed<18><<8>> @[PE.scala 99:23]
    wire oprand4 : Fixed<18><<8>> @[PE.scala 100:23]
    wire result : Fixed<18><<8>> @[PE.scala 101:22]
    node _T_3 = bits(reg_acc, 8, 1) @[PE.scala 103:40]
    node _T_4 = cvt(_T_3) @[PE.scala 103:51]
    node _T_5 = bits(reset, 0, 0) @[PE.scala 103:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[PE.scala 103:11]
    when _T_6 : @[PE.scala 103:11]
      printf(clock, UInt<1>(1), "ext_acc = %b\n", _T_4) @[PE.scala 103:11]
      skip @[PE.scala 103:11]
    node _T_7 = asUInt(io.in_inv_sum) @[PE.scala 104:53]
    node _T_8 = bits(reset, 0, 0) @[PE.scala 104:11]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[PE.scala 104:11]
    when _T_9 : @[PE.scala 104:11]
      printf(clock, UInt<1>(1), "inv_sum = %b\n", _T_7) @[PE.scala 104:11]
      skip @[PE.scala 104:11]
    node _T_10 = asUInt(reg_prob) @[PE.scala 105:49]
    node _T_11 = bits(reset, 0, 0) @[PE.scala 105:11]
    node _T_12 = eq(_T_11, UInt<1>("h00")) @[PE.scala 105:11]
    when _T_12 : @[PE.scala 105:11]
      printf(clock, UInt<1>(1), "reg_prob = %b\n", _T_10) @[PE.scala 105:11]
      skip @[PE.scala 105:11]
    node _oprand1_T = bits(reg_acc, 8, 1) @[PE.scala 107:89]
    node _oprand1_T_1 = cvt(_oprand1_T) @[PE.scala 107:100]
    node _oprand1_T_2 = asFixedPoint(_oprand1_T_1, 4) @[PE.scala 107:115]
    node _oprand1_T_3 = eq(UInt<1>("h00"), io.in_stage) @[Mux.scala 80:60]
    wire _oprand1_WIRE : Fixed<9><<4>> @[Mux.scala 80:57]
    _oprand1_WIRE is invalid @[Mux.scala 80:57]
    node _oprand1_T_4 = mux(_oprand1_T_3, io.in_q, _oprand1_WIRE) @[Mux.scala 80:57]
    node _oprand1_T_5 = eq(UInt<1>("h01"), io.in_stage) @[Mux.scala 80:60]
    node _oprand1_T_6 = mux(_oprand1_T_5, k, _oprand1_T_4) @[Mux.scala 80:57]
    node _oprand1_T_7 = eq(UInt<2>("h03"), io.in_stage) @[Mux.scala 80:60]
    node _oprand1_T_8 = mux(_oprand1_T_7, _oprand1_T_2, _oprand1_T_6) @[Mux.scala 80:57]
    node _oprand1_T_9 = eq(UInt<3>("h04"), io.in_stage) @[Mux.scala 80:60]
    node _oprand1_T_10 = mux(_oprand1_T_9, reg_prob, _oprand1_T_8) @[Mux.scala 80:57]
    oprand1 <= _oprand1_T_10 @[PE.scala 107:13]
    node _oprand2_T = asFixedPoint(io.in_inv_sum, 4) @[PE.scala 108:121]
    node _oprand2_T_1 = eq(UInt<1>("h00"), io.in_stage) @[Mux.scala 80:60]
    wire _oprand2_WIRE : Fixed<9><<4>> @[Mux.scala 80:57]
    _oprand2_WIRE is invalid @[Mux.scala 80:57]
    node _oprand2_T_2 = mux(_oprand2_T_1, io.in_kv, _oprand2_WIRE) @[Mux.scala 80:57]
    node _oprand2_T_3 = eq(UInt<1>("h01"), io.in_stage) @[Mux.scala 80:60]
    node _oprand2_T_4 = mux(_oprand2_T_3, fraction_bits, _oprand2_T_2) @[Mux.scala 80:57]
    node _oprand2_T_5 = eq(UInt<2>("h03"), io.in_stage) @[Mux.scala 80:60]
    node _oprand2_T_6 = mux(_oprand2_T_5, _oprand2_T, _oprand2_T_4) @[Mux.scala 80:57]
    node _oprand2_T_7 = eq(UInt<3>("h04"), io.in_stage) @[Mux.scala 80:60]
    node _oprand2_T_8 = mux(_oprand2_T_7, io.in_kv, _oprand2_T_6) @[Mux.scala 80:57]
    oprand2 <= _oprand2_T_8 @[PE.scala 108:13]
    node _oprand3_T = eq(UInt<1>("h00"), io.in_stage) @[Mux.scala 80:60]
    wire _oprand3_WIRE : Fixed<18><<8>> @[Mux.scala 80:57]
    _oprand3_WIRE is invalid @[Mux.scala 80:57]
    node _oprand3_T_1 = mux(_oprand3_T, reg_acc, _oprand3_WIRE) @[Mux.scala 80:57]
    node _oprand3_T_2 = eq(UInt<1>("h01"), io.in_stage) @[Mux.scala 80:60]
    node _oprand3_T_3 = mux(_oprand3_T_2, b, _oprand3_T_1) @[Mux.scala 80:57]
    node _oprand3_T_4 = eq(UInt<2>("h02"), io.in_stage) @[Mux.scala 80:60]
    node _oprand3_T_5 = mux(_oprand3_T_4, shifted_sum, _oprand3_T_3) @[Mux.scala 80:57]
    node _oprand3_T_6 = eq(UInt<2>("h03"), io.in_stage) @[Mux.scala 80:60]
    node _oprand3_T_7 = mux(_oprand3_T_6, asFixedPoint(UInt<18>("h00"), 8), _oprand3_T_5) @[Mux.scala 80:57]
    node _oprand3_T_8 = eq(UInt<3>("h04"), io.in_stage) @[Mux.scala 80:60]
    node _oprand3_T_9 = mux(_oprand3_T_8, io.in_sum, _oprand3_T_7) @[Mux.scala 80:57]
    oprand3 <= _oprand3_T_9 @[PE.scala 109:13]
    node _product_T = eq(io.in_stage, UInt<2>("h02")) @[PE.scala 111:31]
    node _product_T_1 = mul(oprand1, oprand2) @[PE.scala 111:60]
    node _product_T_2 = mux(_product_T, shifted_acc, _product_T_1) @[PE.scala 111:19]
    product <= _product_T_2 @[PE.scala 111:13]
    node _oprand4_T = eq(io.in_stage, UInt<3>("h04")) @[PE.scala 112:31]
    node _oprand4_T_1 = shr(product, 3) @[PE.scala 112:47]
    node _oprand4_T_2 = eq(io.in_stage, UInt<1>("h01")) @[PE.scala 112:68]
    node _oprand4_T_3 = shr(product, 4) @[PE.scala 112:84]
    node _oprand4_T_4 = mux(_oprand4_T_2, _oprand4_T_3, product) @[PE.scala 112:56]
    node _oprand4_T_5 = mux(_oprand4_T, _oprand4_T_1, _oprand4_T_4) @[PE.scala 112:19]
    oprand4 <= _oprand4_T_5 @[PE.scala 112:13]
    node _result_T = add(oprand3, oprand4) @[PE.scala 113:23]
    node _result_T_1 = tail(_result_T, 1) @[PE.scala 113:23]
    node _result_T_2 = asFixedPoint(_result_T_1, 8) @[PE.scala 113:23]
    result <= _result_T_2 @[PE.scala 113:12]
    shifted_acc is invalid @[PE.scala 115:17]
    shifted_sum is invalid @[PE.scala 116:17]
    max_exp is invalid @[PE.scala 117:13]
    node _T_13 = eq(io.in_stage, UInt<1>("h00")) @[PE.scala 119:21]
    when _T_13 : @[PE.scala 119:29]
      reg_acc <= result @[PE.scala 120:17]
      reg_prob is invalid @[PE.scala 121:18]
      reg_max_exp is invalid @[PE.scala 122:21]
      sum is invalid @[PE.scala 123:13]
      sum_exp is invalid @[PE.scala 124:17]
      skip @[PE.scala 119:29]
    else : @[PE.scala 125:35]
      node _T_14 = eq(io.in_stage, UInt<1>("h01")) @[PE.scala 125:27]
      when _T_14 : @[PE.scala 125:35]
        reg_acc <= result @[PE.scala 126:17]
        reg_prob is invalid @[PE.scala 127:18]
        reg_max_exp <= integer_bits @[PE.scala 128:21]
        sum is invalid @[PE.scala 129:13]
        sum_exp is invalid @[PE.scala 130:17]
        skip @[PE.scala 125:35]
      else : @[PE.scala 131:35]
        node _T_15 = eq(io.in_stage, UInt<2>("h02")) @[PE.scala 131:27]
        when _T_15 : @[PE.scala 131:35]
          node _T_16 = lt(reg_max_exp, io.in_sum_exp) @[PE.scala 132:26]
          when _T_16 : @[PE.scala 132:43]
            node _shifted_acc_T = sub(io.in_sum_exp, reg_max_exp) @[PE.scala 133:54]
            node _shifted_acc_T_1 = tail(_shifted_acc_T, 1) @[PE.scala 133:54]
            node _shifted_acc_T_2 = asSInt(_shifted_acc_T_1) @[PE.scala 133:54]
            node _shifted_acc_T_3 = asUInt(_shifted_acc_T_2) @[PE.scala 133:75]
            node _shifted_acc_T_4 = dshr(reg_acc, _shifted_acc_T_3) @[PE.scala 133:36]
            shifted_acc <= _shifted_acc_T_4 @[PE.scala 133:25]
            shifted_sum <= io.in_sum @[PE.scala 134:25]
            max_exp <= io.in_sum_exp @[PE.scala 135:21]
            skip @[PE.scala 132:43]
          else : @[PE.scala 136:21]
            shifted_acc <= reg_acc @[PE.scala 137:25]
            node _shifted_sum_T = sub(reg_max_exp, io.in_sum_exp) @[PE.scala 138:54]
            node _shifted_sum_T_1 = tail(_shifted_sum_T, 1) @[PE.scala 138:54]
            node _shifted_sum_T_2 = asSInt(_shifted_sum_T_1) @[PE.scala 138:54]
            node _shifted_sum_T_3 = asUInt(_shifted_sum_T_2) @[PE.scala 138:77]
            node _shifted_sum_T_4 = dshr(io.in_sum, _shifted_sum_T_3) @[PE.scala 138:38]
            shifted_sum <= _shifted_sum_T_4 @[PE.scala 138:25]
            max_exp <= reg_max_exp @[PE.scala 139:21]
            skip @[PE.scala 136:21]
          reg_acc <= shifted_acc @[PE.scala 141:17]
          reg_prob is invalid @[PE.scala 142:18]
          reg_max_exp <= max_exp @[PE.scala 143:21]
          sum <= result @[PE.scala 144:13]
          sum_exp <= max_exp @[PE.scala 145:17]
          skip @[PE.scala 131:35]
        else : @[PE.scala 146:35]
          node _T_17 = eq(io.in_stage, UInt<2>("h03")) @[PE.scala 146:27]
          when _T_17 : @[PE.scala 146:35]
            reg_acc <= reg_acc @[PE.scala 147:17]
            node _reg_prob_T = sub(io.in_inv_sum_exp, reg_max_exp) @[PE.scala 148:51]
            node _reg_prob_T_1 = tail(_reg_prob_T, 1) @[PE.scala 148:51]
            node _reg_prob_T_2 = asSInt(_reg_prob_T_1) @[PE.scala 148:51]
            node _reg_prob_T_3 = asUInt(_reg_prob_T_2) @[PE.scala 148:72]
            node _reg_prob_T_4 = dshr(result, _reg_prob_T_3) @[PE.scala 148:29]
            node _reg_prob_T_5 = bits(_reg_prob_T_4, 15, 7) @[PE.scala 148:75]
            node _reg_prob_T_6 = asFixedPoint(_reg_prob_T_5, 4) @[PE.scala 148:94]
            reg_prob <= _reg_prob_T_6 @[PE.scala 148:18]
            reg_max_exp <= reg_max_exp @[PE.scala 149:21]
            sum is invalid @[PE.scala 150:13]
            sum_exp is invalid @[PE.scala 151:17]
            skip @[PE.scala 146:35]
          else : @[PE.scala 152:35]
            node _T_18 = eq(io.in_stage, UInt<3>("h04")) @[PE.scala 152:27]
            when _T_18 : @[PE.scala 152:35]
              reg_acc is invalid @[PE.scala 153:17]
              reg_prob <= reg_prob @[PE.scala 154:18]
              reg_max_exp is invalid @[PE.scala 155:21]
              sum <= result @[PE.scala 156:13]
              sum_exp is invalid @[PE.scala 157:17]
              skip @[PE.scala 152:35]
    
